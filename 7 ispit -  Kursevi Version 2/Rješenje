#include<iostream>
using namespace std;
const char *crt = "\n--------------------------------------------\n";

enum enumKursevi { HtmlCSSJavaScript, SoftwareEngeneeringFundamentals, MasteringSQL, WindowsSecurity };
const char *enumKurseviChar[] = { "HtmlCSSJavaScript", "SoftwareEngeneeringFundamentals", "MasteringSQL", "WindowsSecurity" };	//za slovni ispis enumeracije

struct Datum {
	int * _dan, *_mjesec, *_godina;
	
	void Unos(int d, int m, int g) {
		_dan = new int(d);
		_mjesec = new int(m);
		_godina = new int(g);
	}
	
	void Ispis() { cout << *_dan << "/" << *_mjesec << "/" << *_godina; }
	
	void Dealociraj() { 
		delete _dan;		_dan = nullptr;
		delete _mjesec;		_mjesec = nullptr;
		delete _godina;		_godina = nullptr;
	}
	
	int SumaDatuma()
	{
		return *_dan + *_mjesec * 30 + *_godina * 365;
	}
};

struct Kurs {
	enumKursevi _kurs;
	Datum * _pocetak;
	Datum * _kraj;
	char * _imePredavaca;
	float _cijenaKursa;

	void Unos(enumKursevi kurs, Datum pocetak, Datum kraj, const char * imePredavaca, float cijenaKursa) {
		
		_kurs = kurs;
		_pocetak = new Datum;
		_pocetak->Unos(*pocetak._dan, *pocetak._mjesec, *pocetak._godina);
		
		_kraj = new Datum;
		_kraj->Unos(*kraj._dan, *kraj._mjesec, *kraj._godina);
		
		int size = strlen(imePredavaca) + 1;
		_imePredavaca = new char[size];
		strcpy_s(_imePredavaca, size, imePredavaca);
		_cijenaKursa = cijenaKursa;
	}
	
	void Ispis() {
		cout << _kurs << " " << _imePredavaca << " " << _cijenaKursa << " (";
		_pocetak->Ispis(); cout << " - "; _kraj->Ispis(); cout << ")";
	}
	
	void Dealociraj() {
		delete[] _imePredavaca; _imePredavaca = nullptr;
		_pocetak->Dealociraj();
		_kraj->Dealociraj();
		delete _pocetak; _pocetak = nullptr;
		delete _kraj; _kraj = nullptr;
	}
};

struct Polaznik {
	char * _imePrezime;
	Datum * _datumRodjenja;
	
	void Unos(const char * imePrezime, Datum datumRodjenja) {
		int size = strlen(imePrezime) + 1;
		_imePrezime = new char[size];
		strcpy_s(_imePrezime, size, imePrezime);
		
		_datumRodjenja = new Datum;      // potrebna alokacija datuma inace run time error
		_datumRodjenja->Unos(*datumRodjenja._dan, *datumRodjenja._mjesec, *datumRodjenja._godina);
	}
	
	void Dealociraj() {
		delete[] _imePrezime; _imePrezime = nullptr;
		delete _datumRodjenja; _datumRodjenja = nullptr;
	}
	void Ispis() { cout << _imePrezime << "("; _datumRodjenja->Ispis(); cout << ")"; }
};

struct Prijava {
	Polaznik * _polaznik; //prijava moze biti pojedinacna ili grupna
	float * _uplaceniIznos;
	int _trenutnoPolaznika;
	Kurs * _kurs; //prijava treba cuvati adresu (pokazivati) na postojeci kurs, a ne kreirati novi	

	void Unos(Kurs *kurs)
	{
		_kurs = new Kurs;         // alocirano dodatno 
		_kurs->Unos(kurs->_kurs, *kurs->_pocetak, *kurs->_kraj, kurs->_imePredavaca, kurs->_cijenaKursa);

		_polaznik = nullptr;
		_uplaceniIznos = nullptr;
		_trenutnoPolaznika = 0;
	}
	void Ispis()
	{
		_kurs->Ispis();
		for (int i = 0; i < _trenutnoPolaznika; i++)
		{
			_polaznik[i].Ispis();
			cout << "Uplaceni iznos : " << _uplaceniIznos << "  KM" << endl;
		}
	}

	void Kopiraj(Prijava p)
	{
		_trenutnoPolaznika = p._trenutnoPolaznika;
		_uplaceniIznos =new float[_trenutnoPolaznika];
		_polaznik = new Polaznik[_trenutnoPolaznika];

		for (int i = 0; i < _trenutnoPolaznika; i++)
		{
			_polaznik[i].Unos(p._polaznik[i]._imePrezime, *p._polaznik[i]._datumRodjenja);
			_uplaceniIznos[i] = p._uplaceniIznos[i];
		}
	}

	void Dealociraj()
	{
		_kurs->Dealociraj();

for (int i = 0; i < _trenutnoPolaznika; i++)
{
	_polaznik[i].Dealociraj();
}
delete[]_polaznik;		_polaznik = nullptr;
delete[]_uplaceniIznos;		_uplaceniIznos = nullptr;
	}

	/*za svakog polaznika ce se cuvati podatak o iznosu uplate. uplaceni iznos svakog pojedinog polaznika treba biti jednak punoj cijeni kursa osim u sljedecim slucajevima:
	1. prijave 2 ili 3 polaznika dobijaju 10% popusta na ukupnu cijenu kursa
	2. prijave za vise od 3 polaznika dobijaju 15% na ukupnu cijenu kursa
	*/

	//tokom prijave polaznika nije potrebno uplatiti kompletan iznos, ali on mora biti veci od 50% iznosa
	//kojeg je u tom momentu potrebno platiti (u zavisnosti od broja prijavljenih tj. ostvarenog popusta)

	bool DodajPolaznika(Polaznik p, float uplata)
	{
		for (int i = 0; i < _trenutnoPolaznika; i++)
		{
			if (strcmp(_polaznik[i]._imePrezime, p._imePrezime) == 0)
				return false;
		}

		float cijena = _kurs->_cijenaKursa;

		if (_trenutnoPolaznika == 2 || _trenutnoPolaznika == 3)
			cijena = cijena - cijena * 0, 10;

		if (_trenutnoPolaznika > 3)
			cijena = cijena - cijena * 0.15;

		if (uplata < cijena / 2)
			return false;

		Polaznik* temp = new Polaznik[_trenutnoPolaznika + 1];
		float *tempKes = new float[_trenutnoPolaznika + 1];

		for (int i = 0; i < _trenutnoPolaznika; i++)
		{
			temp[i].Unos(_polaznik[i]._imePrezime, *_polaznik[i]._datumRodjenja);
			tempKes[i] = _uplaceniIznos[i];

			_polaznik[i].Dealociraj();
		}

		if (_polaznik != nullptr)
			delete[]_polaznik;

		if (_uplaceniIznos != nullptr)
			delete[]_uplaceniIznos;

		temp[_trenutnoPolaznika].Unos(p._imePrezime, *p._datumRodjenja);
		tempKes[_trenutnoPolaznika] = uplata;

		_polaznik = temp;
		_uplaceniIznos = tempKes;
		_trenutnoPolaznika++;
		return true;
	}

	bool DodajUplatu(Polaznik p, float uplata)
	{
		bool postoji = false;

		for (int i = 0; i < _trenutnoPolaznika; i++)
		{
			if (strcmp(_polaznik[i]._imePrezime, p._imePrezime) == 0)
			{
				postoji = true;
			}
		}

		if (!postoji)
			return false;

		for (int i = 0; i < _trenutnoPolaznika; i++)
		{
			if (strcmp(_polaznik[i]._imePrezime, p._imePrezime) == 0)
			{
				_uplaceniIznos[i] = _uplaceniIznos[i] + uplata;
				return true;
			}
		}
	}

	float StatusUplate(Polaznik p)
	{
		float cijena = _kurs->_cijenaKursa;

		if (_trenutnoPolaznika == 2 || _trenutnoPolaznika == 3)
			cijena = cijena - cijena * 0.10;

		if (_trenutnoPolaznika > 3)
			cijena = cijena - cijena * 0.15;

		for (int i = 0; i < _trenutnoPolaznika; i++)
		{
			if (strcmp(_polaznik[i]._imePrezime, p._imePrezime) == 0)
			{
				if (_uplaceniIznos[i] < cijena)
					return (cijena - _uplaceniIznos[i])*-1;

				if (_uplaceniIznos[i] > cijena)
					return _uplaceniIznos[i] - cijena;
			}
		}
		return 0;
	}

};

struct SkillsCentar {
	char * _nazivCentra;
	Kurs * _kursevi[50];//JEDAN EDUKACIJSKI CENTAR MOZE NUDITI NAJVISE 50 KURSEVA
	int _trenutnoKurseva;
	Prijava * _prijave;
	int _trenutnoPrijava;

	void Unos(const char *naziv)
	{
		int size = strlen(naziv) + 1;
		_nazivCentra = new char[size];
		strcpy_s(_nazivCentra, size, naziv);
		_trenutnoKurseva = 0;
		_prijave = nullptr;
		_trenutnoPrijava = 0;
	}
	void Ispis()
	{
		cout << _nazivCentra << endl;
		cout << "Kursevi -> " << endl;
		for (int i = 0; i < _trenutnoKurseva; i++)
		{
			_kursevi[i]->Ispis();
			cout << crt << endl;
		}
		cout << "Polaznici -> " << endl;
		for (int i = 0; i < _trenutnoPrijava; i++)
		{
			_prijave[i].Ispis();
			cout << crt << endl;
		}
	}
	void Dealociraj()
	{
		delete[]_nazivCentra;	_nazivCentra = nullptr;

		for (int i = 0; i < _trenutnoKurseva; i++)
		{
			_kursevi[i]->Dealociraj();
			_kursevi[i] = nullptr;
		}
		for (int i = 0; i < _trenutnoPrijava; i++)
		{
			_prijave[i].Dealociraj();
		}
		delete[]_prijave;	_prijave = nullptr;
	}

	//jedan edukacijski centar moze moze nuditi vise istih kurseva (npr. MasteringSQL), ali novi kurs moze poceti tek 15 dana nakon zavrsetka prethodnog kursa npr. 
	//ako prethodni kurs MasteringSQL traje 01.03.2016 - 01.04.2016, onda se novi kurs MasteringSQL moze poceti nakon 15.04.2016
	
	bool DodajKurs(Kurs k)
	{
		for (int i = 0; i < _trenutnoKurseva; i++)
		{
			if (_kursevi[i]->_kurs == k._kurs)
			{
				if (abs(_kursevi[i]->_kraj->SumaDatuma() - k._pocetak->SumaDatuma()) < 15)
				{
					return false;
				}
			}
		}
		_kursevi[_trenutnoKurseva] = new Kurs;
		_kursevi[_trenutnoKurseva]->Unos(k._kurs, *k._pocetak, *k._kraj, k._imePredavaca, k._cijenaKursa);
		_trenutnoKurseva++;
		return true;
	}
	
	//nije moguce dodati prijavu onog kursa koji nije evidentiran (registrovan, ponudjen) u tom edukacijskom centru
	//moguce je dodati samo one prijave koje kod kojih ukupna uplata iznosi vise od 80% cijene kursa (za prijavljeni broj polaznika) 
	
	bool DodajPrijavu(Prijava prijava)
	{
		bool postoji = false;
		for (int i = 0; i < _trenutnoKurseva; i++)
		{
			if (_kursevi[i]->_kurs == prijava._kurs->_kurs)
			{
				postoji = true;
			}
		}
		if (!postoji)
			return false;

		float cijena = prijava._kurs->_cijenaKursa;

		if (prijava._trenutnoPolaznika == 2 || prijava._trenutnoPolaznika == 3)
			cijena = cijena - cijena * 0.10;
		if (prijava._trenutnoPolaznika > 3)
			cijena = cijena - cijena * 0.15;

		cijena = (prijava._trenutnoPolaznika*cijena)*0.80;

		float suma = 0;
		for (int i = 0; i < prijava._trenutnoPolaznika; i++)
		{
			suma += prijava._uplaceniIznos[i];
		}

		if (suma < cijena)
			return false;

		Prijava *temp = new Prijava[_trenutnoPrijava + 1];

		for (int i = 0; i < _trenutnoPrijava; i++)
		{
			temp[i].Unos(_prijave[i]._kurs);
			temp[i].Kopiraj(_prijave[i]);

			_prijave[i].Dealociraj();
		}
		delete[]_prijave;

		temp[_trenutnoPrijava].Unos(prijava._kurs);
		temp[_trenutnoPrijava].Kopiraj(prijava);
		_trenutnoPrijava++;
		return true;
	}

	Polaznik * PolazniciDugovanja(int &brojPolaznika)
	{
		Polaznik *temp = new Polaznik[brojPolaznika];

		for (int i = 0; i < _trenutnoPrijava; i++)
		{
			float cijena = _prijave->_kurs->_cijenaKursa;

			if (_prijave[i]._trenutnoPolaznika == 2 || _prijave[i]._trenutnoPolaznika == 3)
				cijena = cijena - cijena * 0.10;

			if (_prijave[i]._trenutnoPolaznika > 3)
				cijena = cijena - cijena * 0.15;

			for (int j = 0; j < _prijave[i]._trenutnoPolaznika; j++)
			{
				if (_prijave[i]._uplaceniIznos[j] < cijena)
				{
					temp[i].Unos(_prijave[i]._polaznik->_imePrezime, *_prijave[i]._polaznik->_datumRodjenja);
					brojPolaznika++;
				}
			}
		}
		if (brojPolaznika == 0)
			return nullptr;
		else
			return temp;
	}



};


void main() {

	Datum datum1, datum2, datum3, datum4, datum5, datum6, rodjendan;
	
	datum1.Unos(26, 11, 2015);
	datum2.Unos(29, 5, 2016);
	datum3.Unos(5, 6, 2016);
	datum4.Unos(15, 8, 2016);
	datum5.Unos(13, 7, 2016);
	datum6.Unos(22, 9, 2016);
	rodjendan.Unos(15, 6, 1995);

	Kurs softverski, html, sql, security;
	
	softverski.Unos(SoftwareEngeneeringFundamentals, datum1, datum2, "Emina Junuz", 1800);
	html.Unos(HtmlCSSJavaScript, datum2, datum3, "Larisa Tipura", 1000);
	sql.Unos(MasteringSQL, datum3, datum4, "Jasmin Azemovic", 2230);
	security.Unos(WindowsSecurity, datum3, datum4, "Adel Handzic", 4000);

	Polaznik denis, zanin, indira, dubravka;
	
	denis.Unos("Denis Music", rodjendan);
	zanin.Unos("Zanin Vejzovic", rodjendan);
	indira.Unos("Indira Hamulic", rodjendan);
	dubravka.Unos("Dubravka Plosko", rodjendan);


	Prijava denisZaninDubravkaHtml, zaninIndiraHtml, indiraSql;
	
	denisZaninDubravkaHtml.Unos(&html);
	//700 predstavlja uplatu polaznika koji se prijavljuje na kurs
	if (denisZaninDubravkaHtml.DodajPolaznika(denis, 700))//tokom prijave polaznika nije potrebno uplatiti kompletan iznos, ali on mora biti veci od 50% iznosa
		//kojeg je u tom momentu potrebno platiti (u zavisnosti od broja prijavljenih tj. ostvarenog popusta)
		cout << "Polaznik uspjesno dodan!" << endl;
	if (denisZaninDubravkaHtml.DodajPolaznika(zanin, 650))
		cout << "Polaznik uspjesno dodan!" << endl;
	if (denisZaninDubravkaHtml.DodajPolaznika(zanin, 650))//onemoguciti dupliranje polaznika na istoj prijavi
		cout << "Polaznik uspjesno dodan!" << endl;
	if (denisZaninDubravkaHtml.DodajPolaznika(dubravka, 430))//uplata ne zadovoljava kriterije
		cout << "Polaznik uspjesno dodan!" << endl;

	if (denisZaninDubravkaHtml.DodajUplatu(zanin, 200))//polaznik mora biti prethodno dodan prijavi da bi mogao dodati novu uplatu
		cout << "Uplata uspjesno dodana" << endl;

	zaninIndiraHtml.Unos(&html);
	if (zaninIndiraHtml.DodajPolaznika(zanin, 800))
		cout << "Polaznik uspjesno dodan!" << endl;
	if (zaninIndiraHtml.DodajPolaznika(indira, 750))
		cout << "Polaznik uspjesno dodan!" << endl;

	float stanjeUplate = denisZaninDubravkaHtml.StatusUplate(zanin);//ako polaznik duguje novca funkcija vraca negativan iznos potrebne uplate
	cout << "Polaznik "; zanin.Ispis();
	if (stanjeUplate > 0)
		cout << " je u pretplati " << stanjeUplate << " KM" << endl;
	else
		cout << " je duzan uplatiti " << stanjeUplate * -1 << " KM" << endl;

	SkillsCentar mostar;
	mostar.Unos("Skills Center Mostar");
	//jedan edukacijski centar moze moze nuditi vise istih kurseva (npr. MasteringSQL), ali novi kurs moze poceti tek 15 dana nakon zavrsetka prethodnog kursa npr. 
	//ako prethodni kurs MasteringSQL traje 01.03.2016 - 01.04.2016, onda se novi kurs MasteringSQL moze poceti nakon 15.04.2016
	if (mostar.DodajKurs(softverski)) {
		cout << crt << "KURS USPJESNO REGISTROVAN" << crt;
		softverski.Ispis();
		cout << crt;
	}
	//nije moguce dodati prijavu onog kursa koji nije evidentiran (registrovan, ponudjen) u tom edukacijskom centru
	//moguce je dodati samo one prijave koje kod kojih ukupna uplata iznosi vise od 80% cijene kursa (za prijavljeni broj polaznika) 
	if (mostar.DodajPrijavu(denisZaninDubravkaHtml)) {
		cout << crt << "PRIJAVA EVIDENTIRANA" << crt;
		denisZaninDubravkaHtml.Ispis();
	}
	if (mostar.DodajPrijavu(zaninIndiraHtml)) {
		cout << crt << "PRIJAVA EVIDENTIRANA" << crt;
		zaninIndiraHtml.Ispis();
	}
	int brojPolaznika = 0;
	//vraca niz polaznika koji nisu izmirili uplate
	Polaznik * polazniciDugovanja = mostar.PolazniciDugovanja(brojPolaznika);

	cout << "Pronadjeno " << brojPolaznika << " polaznika koji nisu kompletirali svoje uplate --->>> ";
	for (size_t i = 0; i < brojPolaznika; i++)
		polazniciDugovanja[i].Ispis();

	//PretragaRekurzivno - rekurzivna funkcija pronalazi najveci iznos duga ostvarenog u odredjenom edukacijskom centru
	//cout << "Najveci dug iznosi " << PretragaRekurzivno(/*potrebni parametri*/) << endl;
	//ispisuje sve informacije o edukacijskom centru. prije ispisa sortirati sve prijave po visini dugovanja njenih polaznika
	mostar.Ispis();

	//izvrsiti potrebne dealokacije
	system("pause>0");
}
