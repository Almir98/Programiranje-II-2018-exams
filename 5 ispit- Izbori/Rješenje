#include<iostream>
#include<fstream>
using namespace std;

enum Opstina { Opstina1, Opstina2, Opstina3, Opstina4 };
const char * OpstineChar[] = { "Opstina1", "Opstina2", "Opstina3", "Opstina4" };
enum Kandidati { Kandidat1, Kandidat2, Kandidat3, Kandidat4 };
const char * KandidatiChar[] = { "Kandidat1", "Kandidat2", "Kandidat3", "Kandidat4" };

struct Datum {
	int _dan, _mjesec, _godina;
	void Unos(int d, int m, int g) { _dan = d; _mjesec = m; _godina = g; }
	void Ispis() { cout << _dan << "/" << _mjesec << "/" << _godina << endl; }

	int SumaDatuma()
	{
		return _mjesec * 30 + _godina*365;
	}
};

struct Osoba {
	Datum _datumRodjenja;
	char * _imePrezime;
	char _JMBG[14];
	Opstina _Prebivaliste;
	
	void unos(Datum d, const char * ip, const char jmbg[], Opstina p) {
		_datumRodjenja.Unos(d._dan, d._mjesec, d._godina);
		_Prebivaliste = p;
		int size = strlen(ip) + 1;
		_imePrezime = new char[size];
		strcpy_s(_imePrezime, size, ip);
		strcpy_s(_JMBG, jmbg);
	}
	
	void Dealociraj() { delete[] _imePrezime; _imePrezime = nullptr; }
	
	void Info() {
		_datumRodjenja.Ispis();
		cout << _imePrezime << " " << _JMBG << " " <<
			OpstineChar[_Prebivaliste] << endl;
	}
};

struct Glas {
	Osoba * _glasac;
	Kandidati * _glasZa;
	
	void Unos(Osoba o, Kandidati k) {
		_glasac = new Osoba;
		_glasac->unos(o._datumRodjenja, o._imePrezime, o._JMBG, o._Prebivaliste);
		_glasZa = new Kandidati(k);
	}
	
	void Ispis() {
		_glasac->Info();
		cout << KandidatiChar[*_glasZa] << endl;
	}
	
	void Dealociraj() { _glasac->Dealociraj(); }
};

struct Izbori2016 {
	Opstina * _glasackoMjesto;
	Glas * _glasovi[1000];
	int _doSadaGlasalo;

	void Unos(Opstina o)
	{
		_glasackoMjesto = new Opstina;
		*_glasackoMjesto = o;
		_doSadaGlasalo = 0;
	}
	void Ispis()
	{
		cout << OpstineChar[*_glasackoMjesto] << endl;
		for (int i = 0; i < _doSadaGlasalo; i++)
			_glasovi[i]->Ispis();
	}

	bool DodajGlas(Glas g, Datum d)
	{
		if (_doSadaGlasalo > 1000)
			return false;

		for (int i = 0; i < _doSadaGlasalo; i++)
		{
			if (strcmp(_glasovi[i]->_glasac->_JMBG, g._glasac->_JMBG) == 0)
				return false;
		}
		if (g._glasac->_Prebivaliste != *_glasackoMjesto)
			return false;
		
		if (abs(d.SumaDatuma()- g._glasac->_datumRodjenja.SumaDatuma()) < 18 * 365)
			return false;

		_glasovi[_doSadaGlasalo] = new Glas;
		_glasovi[_doSadaGlasalo]->Unos(*g._glasac, *g._glasZa);
		_doSadaGlasalo++;
		return true;
	}

	int BrojGlasacaPoRodjenju(Datum OD, Datum DO)
	{
		int brojac = 0;
		for (int i = 0; i < _doSadaGlasalo; i++)
		{
			if (_glasovi[i]->_glasac->_datumRodjenja.SumaDatuma() <= OD.SumaDatuma() && _glasovi[i]->_glasac->_datumRodjenja.SumaDatuma() >= DO.SumaDatuma())
				brojac++;
		}
		return brojac;
	}


	/*
	2. DodajGlas - funkcija treba da omoguci dodavanje informacija o novom glasu i tom prilikom onemoguciti: da ista osoba glasa vise puta, glasanje osobama mladjim
	od 18 godina (uzeti u obzir samo mjesec i godinu rodjenja), glasanje osobama iz drugih opstina. U zavisnosti od uspjesnosti operacije funkcija vraca true ili false
	
	3. Ispis - u zavisnosti od postignutog uspjeha funkcija treba ispisati listu kandidata sortiranu opadajucim redoslijedom, a uz svakog kandidata je potrebno 
	ispisati i osvojeni procenat glasova.
	Funkcija vraca opstinu u kojoj je pobjednicki kandidat ostvario najveci broj glasova, a ukoliko je pobjednicki kandidat ostvario podjednak broj glasova u vise
	opstina, funkcija vraca prvu koja se nalazi u nizu na koji pokazuje pokazivac izbornaMjesta
	
	4. BrojGlasacaPoRodjenju - funkcija vraca broj glasaca koji su do tog momenta glasali, a koji su rodjeni u parametrima definisanom periodu (parametri su tipa 
	datum, period OD i DO)
	*/
};

void UpisiUBinarniFajl(Izbori2016 &izbori)
{
	ofstream upis;
	upis.open(OpstineChar[*izbori._glasackoMjesto], ios::binary);
	upis.write((char*)(&izbori), sizeof(izbori));
	upis.close();
}

void UcitajIzBinarnogFajla(Izbori2016 &izbori, const char*naziv)
{
	ifstream ispis;
	ispis.open(naziv, ios::binary);
	ispis.read((char*)(&izbori), sizeof(izbori));
	ispis.close();
}

int PretragaRekurzivno(Izbori2016 iz,Kandidati k,int brojac=0,int glasova=0)
{
	if (iz._doSadaGlasalo == brojac)
		return glasova;

	if (*iz._glasovi[brojac]->_glasZa == k)
		return PretragaRekurzivno(iz, k, brojac + 1, glasova + 1);
	return PretragaRekurzivno(iz, k, brojac + 1, glasova);
}

/*
1. UpisiUBinarniFajl - objekat koji je primljen kao parametar upisuje u binarni fajl. Naziv fajla treba biti identican nazivu opstine u kojoj se odrzavaju izbori
2. UcitajIzBinarnogFajla - u objekat koji je primljen kao parametar ucitava sadrzaj binarnog fajla (naziv fajla je takodjer proslijedjen kao parametar)

3. PretragaRekurzivno - rekurzivna funkcija koja treba da vrati broj glasova koje je na izborima ostvario odredjeni kandidat (kandidat se proslijedjuje kao parametar)
*/

void main() {

	Datum datumGlasac1, datumGlasac2, datumGlasac3, datumGlasac4, datumIzbora;
	datumIzbora.Unos(14, 7, 2016);
	datumGlasac1.Unos(18, 5, 1990);
	datumGlasac2.Unos(5, 3, 1982);
	datumGlasac3.Unos(12, 8, 1958);
	datumGlasac4.Unos(22, 6, 2000);

	Osoba a, b, c, d, e;
	a.unos(datumGlasac1, "Denis Music", "1111111111111", Opstina1);
	b.unos(datumGlasac2, "Jasmin Azemovic", "1111111111112", Opstina1);
	c.unos(datumGlasac3, "Indira Hamulic", "1111111111113", Opstina1);
	d.unos(datumGlasac4, "Adel Handzic", "1111111111114", Opstina2);
	e.unos(datumGlasac4, "Zanin Vejzovic", "1111111111115", Opstina1);


	Glas g1, g2, g3, g4, g5;
	g1.Unos(a, Kandidat1);
	g2.Unos(b, Kandidat1);
	g3.Unos(c, Kandidat2);
	g4.Unos(d, Kandidat1);
	g5.Unos(e, Kandidat2);

	Izbori2016 izbori, izbori_FromFile;
	izbori.Unos(Opstina1);
	if(izbori.DodajGlas(g1, datumIzbora))
	cout << "Glas g1 uspjesno dodan!" << endl;
	if(izbori.DodajGlas(g2, datumIzbora))
	cout << "Glas g2 uspjesno dodan!" << endl;
	if(izbori.DodajGlas(g3, datumIzbora))
	cout << "Glas g3 uspjesno dodan!" << endl;
	if(izbori.DodajGlas(g4, datumIzbora))
	cout << "Glas g4 uspjesno dodan!" << endl;
	if(izbori.DodajGlas(g5, datumIzbora))
	cout << "Glas g5 uspjesno dodan!" << endl;
	
	izbori.Ispis();

	Datum OD, DO;
	OD.Unos(17, 7, 1998);
	DO.Unos(17, 7, 1986);
	cout << "Glasaca u starost od 18 - 30 godina->" << izbori.BrojGlasacaPoRodjenju(OD, DO) << endl;
	cout << "Broj glasova za Kandidat1->" << PretragaRekurzivno(izbori,Kandidat1) << endl;
	UpisiUBinarniFajl(izbori);
	UcitajIzBinarnogFajla(izbori_FromFile, "Opstina1");
	izbori_FromFile.Ispis();

	system("pause>0");
}
