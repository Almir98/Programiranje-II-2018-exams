#include<iostream>
#include<fstream>
using namespace std;
const char * crt = "\n----------------------------------------------------\n";

struct Datum {
	int * _dan, *_mjesec, *_godina;
	void Unos(int d, int m, int g) {
		_dan = new int(d);
		_mjesec = new int(m);
		_godina = new int(g);
	}
	void Ispis() { cout << *_dan << "/" << *_mjesec << "/" << *_godina << endl; }
	void Dealociraj() {
		delete _dan;		_dan = nullptr;
		delete _mjesec;		_mjesec = _mjesec = nullptr;
		delete _godina;		_godina = nullptr;
	}
	int SumaDatuma()
	{
		return *_dan + *_mjesec * 30 + *_godina * 365;
	}
};

struct Izostanak {
	char * _razlogIzostanka;
	Datum _datumIzostanka;
	int _brojSati;
	bool _opravdano; //pravdanje zahtijeva da se evidentira i razlog izostanka	
	
	void Unos(Datum datumIzostanka, int brojSati) {
		_datumIzostanka.Unos(*datumIzostanka._dan, *datumIzostanka._mjesec, *datumIzostanka._godina);
		_brojSati = brojSati;
		_opravdano = false;
		_razlogIzostanka = new char[1];
		_razlogIzostanka[0] = '\0';
	}
	void Dealociraj() { delete[]_razlogIzostanka; _razlogIzostanka = nullptr; }
	
	void Ispis() 
	{
		_datumIzostanka.Ispis();
	cout << "Broj sati : " << _brojSati << endl;
	cout << "Razlog izostanka : ";
			cout<< _razlogIzostanka <<crt;
	}

	void Opravdaj(const char * razlogIzostanka) {
		if (_razlogIzostanka != nullptr)
			delete[] _razlogIzostanka;
		int vel = strlen(razlogIzostanka) + 1;
		_razlogIzostanka = new char[vel];
		strcpy_s(_razlogIzostanka, vel, razlogIzostanka);
		_opravdano = true;
	}
};
struct Student {
	//format broja indeksa: IB150051
	//osigurati automatsko generisanje broja indeksa pocevsi od IB150001
	char _brojIndeksa[9];
	char * _imePrezime;
	Izostanak * _izostanci;
	int _brojIzostanaka;

	//Potpisi funkcija trebaju odgovarati onima u main-u
	//1. Unos
	void Unos(const char *indeks,const char* imeprezime)
	{
		strcpy_s(_brojIndeksa, 9, indeks);
		int size = strlen(imeprezime) + 1;
		_imePrezime = new char[size];
		strcpy_s(_imePrezime, size, imeprezime);
		_izostanci = nullptr;
		_brojIzostanaka = 0;
	}
	
	//2. Dealociraj
	void Dealociraj() {

		for (int  i = 0; i < _brojIzostanaka; i++)
		{
			_izostanci[i].Dealociraj();
		}
		if (_izostanci != nullptr)
		{
			delete[]_izostanci;	_izostanci = nullptr;
		}
		delete[]_imePrezime;	_imePrezime = nullptr;
	}
	/*3. DodajIzostanak - dodaje novi izostanak u listu izostanaka.	Onemoguciti ponavljanje izostanaka na nacin da se uvecava samo broj sati ukoliko
	korisnik (profesor) vise puta pokusa dodati izostanak na isti dan.*/
	
	void DodajIzostanak(Izostanak izostanak) 
	{
	
		for (int i = 0; i < _brojIzostanaka; i++)
		{
			if (*_izostanci[i]._datumIzostanka._dan == *izostanak._datumIzostanka._dan &&
				*_izostanci[i]._datumIzostanka._mjesec == *izostanak._datumIzostanka._mjesec &&
				*_izostanci[i]._datumIzostanka._godina == *izostanak._datumIzostanka._godina)
			{
				_izostanci[i]._brojSati = _izostanci[i]._brojSati + izostanak._brojSati;
			}
		}

		Izostanak *temp = new Izostanak[_brojIzostanaka + 1];
		
		for (int i = 0; i < _brojIzostanaka; i++)
		{
			temp[i].Unos(_izostanci[i]._datumIzostanka, _izostanci[i]._brojSati);
			if (_izostanci[i]._opravdano)
			{
				temp[i].Opravdaj(_izostanci[i]._razlogIzostanka);
				_izostanci[i].Dealociraj();
			}
		}
		
		temp[_brojIzostanaka].Unos(izostanak._datumIzostanka, izostanak._brojSati);
		if (izostanak._opravdano)
		{
			temp[_brojIzostanaka].Opravdaj(izostanak._razlogIzostanka);
		}

		_izostanci = temp;
		_brojIzostanaka++;
	}

	
	//4. Ispis - ispisuje izostanke u formatu prikazanom na slici (nije obavezno da ispis bude identican, ali je svakako pozeljno).
	//Prilikom svakog ispisa, izostanke je potrebno spasiti u tekstualni fajl sa istim nazivom kao i broj indeksa.
	
	void Ispis()
	{
		cout << "Broj indeksa : " << _brojIndeksa << endl;
		cout << "Ime i prezime : " << _imePrezime <<crt;

		for (int i = 0; i < _brojIzostanaka; i++)
		{
			_izostanci[i].Ispis();
		}

		char temp[13];
		strcpy_s(temp, 13, _brojIndeksa);
		strcat_s(temp, 13, ".txt");

		ofstream upis;
		upis.open(temp, ios::ate);
		upis<< "Broj indeksa : " << _brojIndeksa << endl;
		upis << "Ime i prezime : " << _imePrezime << crt;
		upis << "Opravdani : " << endl;
		for (int i = 0; i < _brojIzostanaka; i++)
		{
			if (_izostanci[i]._opravdano)
			{
				upis << *_izostanci[i]._datumIzostanka._dan << "  " << *_izostanci[i]._datumIzostanka._mjesec << "  " << *_izostanci[i]._datumIzostanka._godina << endl;
				upis << _izostanci[i]._razlogIzostanka << endl;
			}
		}
		upis << "Neopravdani : " << endl;

		for (int i = 0; i < _brojIzostanaka; i++)
		{
			if (!_izostanci[i]._opravdano)
			{
				upis << *_izostanci[i]._datumIzostanka._dan << "  " << *_izostanci[i]._datumIzostanka._mjesec << "  " << *_izostanci[i]._datumIzostanka._godina << endl;
			}
		}
		upis.close();
	}	
	//5. BinarnaPretraga - koristeci binarnu pretragu, na osnovu datuma, pronalazi i vraca pokazivac na izostanak. Ukoliko trazeni izostanak ne postoji funkcija
	//vraca nullptr.
	
	Izostanak *BinarnaPretraga(Datum datumIzostanka)
	{
		//za binarnu pretragu potreban je sortirani niz,ali ovde su datumi unoseni od najveceg ka najmanjem pa sortiranje nije potrebno

		int prvi = 0;
		int zadnji = _brojIzostanaka - 1;
		int srednji = 0;

		while (prvi <= zadnji)
		{
			if (_izostanci[srednji]._datumIzostanka.SumaDatuma() < datumIzostanka.SumaDatuma())
				prvi = srednji + 1;
			if (_izostanci[srednji]._datumIzostanka.SumaDatuma() == datumIzostanka.SumaDatuma())
				return &_izostanci[srednji];
			if (_izostanci[srednji]._datumIzostanka.SumaDatuma() > datumIzostanka.SumaDatuma())
				zadnji = srednji - 1;
			srednji = (prvi + zadnji) / 2;
		}
		return nullptr;
	}
};
//1. PronadjiNajveciNeopravdaniIzostanak - rekurzivna funkcija koja vraca pokazivac na neopravdani izostanak koji ima najveci broj sati

Izostanak *PronadjiNajveciNeopravdaniIzostanak(Student *student, int brojac = 0, Izostanak * pok = nullptr, int najveci = 0)
{
	if (student->_brojIzostanaka == brojac)
		return pok;
	if (pok == nullptr)
		return PronadjiNajveciNeopravdaniIzostanak(student, brojac, &student->_izostanci[brojac], najveci);

	if (!student->_izostanci[brojac]._opravdano && student->_izostanci[brojac]._brojSati > najveci)
	
	return PronadjiNajveciNeopravdaniIzostanak(student, brojac + 1, &student->_izostanci[brojac + 1], student->_izostanci[brojac + 1]._brojSati);

	return PronadjiNajveciNeopravdaniIzostanak(student, brojac + 1, pok, najveci);
}

//2. GenerisiSljedeciBrojIndeksa - generise i vraca naredni broj indeksa

int indeks = 170001;

char * GenerisiSljedeciBrojIndeksa() {

	char *temp = new char[9];
	strcpy_s(temp, 3, "IB");
	_itoa_s(indeks, temp + 2, 7, 10);
	indeks++;

	return temp;
}

void main() {
	Datum jucer, prije5Dana, prije10Dana;
	jucer.Unos(12, 6, 2016);
	prije5Dana.Unos(8, 6, 2016);
	prije10Dana.Unos(3, 6, 2016);

	Student denis;
	denis.Unos(GenerisiSljedeciBrojIndeksa(), "Denis Music");


	Izostanak izostanakJucer, izostanakPrije5Dana, izostanakPrije10Dana;

	izostanakJucer.Unos(jucer, 5);
	denis.DodajIzostanak(izostanakJucer);

	izostanakPrije5Dana.Unos(prije5Dana, 3);
	izostanakPrije5Dana.Opravdaj("Odsutan zbog bolesti - gripa");
	denis.DodajIzostanak(izostanakPrije5Dana);
	izostanakPrije5Dana.Unos(prije5Dana, 2);
	denis.DodajIzostanak(izostanakPrije5Dana);

	izostanakPrije10Dana.Unos(prije10Dana, 1);
	denis.DodajIzostanak(izostanakPrije10Dana);
	izostanakPrije10Dana.Unos(prije10Dana, 1);
	denis.DodajIzostanak(izostanakPrije10Dana);

	denis.Ispis();
	
	Izostanak * p = denis.BinarnaPretraga(jucer);
	cout << "Binarnom pretragom pronadjen izostanak -> ";
	if (p!=nullptr)
	{
		p->Ispis();
		denis.Ispis();
	}

	Izostanak * p2 = PronadjiNajveciNeopravdaniIzostanak(&denis);           // jer je pokazivac u strukturi,a ostali inicijalizovani
	cout << "Rekurzivno pronadjen najveci neopravdani izostanak -> ";
	p2->Ispis();
	cout << endl;
	
	jucer.Dealociraj();		prije5Dana.Dealociraj();	prije10Dana.Dealociraj();
	
	izostanakJucer.Dealociraj();	izostanakPrije5Dana.Dealociraj();	izostanakPrije10Dana.Dealociraj();

	if(p!=nullptr)	
	{
		p->Dealociraj();
	}
	
	
	//denis.Dealociraj();

	system("pause>0");
}
