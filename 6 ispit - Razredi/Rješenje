#include<iostream>
using namespace std;
const char *crt = "\n--------------------------------------------\n";

enum enumPredmeti { Matematika, Historija, Geografia, Hemija, Biologija, Engleski };
enum enumRazredi { I, II, III, IV };

const char *charenumPredmeti[] = { "Matematika", "Historija", "Geografia", "Hemija", "Biologija", "Engleski" };//za slovni ispis enumeracije
const char *charenumRazredi[] = { "I","II", "III","IV" };

struct Datum {
	int * _dan, *_mjesec, *_godina;
	
	void Unos(int d, int m, int g) {
		_dan = new int(d);
		_mjesec = new int(m);
		_godina = new int(g);
	}
	
	void Ispis() { cout << *_dan << "/" << *_mjesec << "/" << *_godina << endl; }
	
	void Dealociraj() { delete _dan; delete _mjesec; delete _godina; }

	int SumaDana()
	{
		return *_dan + *_mjesec * 30 + *_godina * 365;
	}
};

struct Kurs {
	enumPredmeti _predmet;
	enumRazredi _razredi;
	Datum * _pocetak;
	Datum * _kraj;
	char * _imePredavaca;
	
	void Unos(enumPredmeti predmet, enumRazredi razred, Datum pocetak, Datum kraj, const char * imePredavaca) {
		_pocetak = new Datum;
		_pocetak->Unos(*pocetak._dan, *pocetak._mjesec, *pocetak._godina);
		
		_kraj = new Datum;
		_kraj->Unos(*kraj._dan, *kraj._mjesec, *kraj._godina);
		
		int size = strlen(imePredavaca) + 1;
		_imePredavaca = new char[size];
		strcpy_s(_imePredavaca, size,imePredavaca);
		
		_predmet = predmet;
		_razredi = razred;
	}
	
	void Ispis() {
		cout << charenumPredmeti[_predmet] << "   " << charenumRazredi[_razredi] << endl << _imePredavaca << endl;
		_pocetak->Ispis();
		_kraj->Ispis();
	}
	
	void Dealociraj() {
		delete[] _imePredavaca; _imePredavaca = nullptr;
		_pocetak->Dealociraj();
		_kraj->Dealociraj();
	}
};

struct Polaznik {
	Datum * _datumRodjenja;
	char * _imePrezime;
	
	void Unos(Datum datumRodjenja, const char * imePrezime) {
		int size = strlen(imePrezime) + 1;
		_imePrezime = new char[size];
		strcpy_s(_imePrezime, size, imePrezime);
		
		_datumRodjenja = new Datum;
		_datumRodjenja->Unos(*datumRodjenja._dan, *datumRodjenja._mjesec, *datumRodjenja._godina);
	}
	
	void Dealociraj() {
		_datumRodjenja->Dealociraj();
		delete[] _imePrezime; _imePrezime = nullptr;
	}
	
	void Ispis() {
	
		cout << _imePrezime << endl;
		_datumRodjenja->Ispis();
	}
};

struct Polaganja {
	Polaznik * _polaznik;
	Kurs * _kurs;
	Datum * _datumPolaganja;
	int _ocjena; //ocjene su u rasponu od 1 do 5	

	void Unos(Polaznik polaznik,Kurs kurs, Datum d, int ocjena)
	{
		_polaznik = new Polaznik;
		_polaznik->Unos(*polaznik._datumRodjenja, polaznik._imePrezime);
		
		_kurs = new Kurs;
		_kurs->Unos(kurs._predmet, kurs._razredi, *kurs._pocetak, *kurs._kraj, kurs._imePredavaca);

		_datumPolaganja = new Datum;
		_datumPolaganja->Unos(*d._dan, *d._mjesec, *d._godina);
		if (ocjena >= 1 && ocjena <= 5)
			_ocjena = ocjena;
	}
	void Ispis()
	{
		_polaznik->Ispis();
		_kurs->Ispis();
		_datumPolaganja->Ispis();
		cout << _ocjena << endl;
	}
	void Dealociraj()
	{
		_polaznik->Dealociraj();
		_kurs->Dealociraj();
		_datumPolaganja->Dealociraj();

		delete[]_polaznik;	_polaznik = nullptr;
		delete[]_kurs;		_kurs = nullptr;
		delete[]_datumPolaganja; _datumPolaganja = nullptr;
	}

};

struct EdukacijskiCentar {
	char * _nazivCentra;
	Kurs * _kursevi[50];//JEDAN EDUKACIJSKI CENTAR MOZE NUDITI NAJVISE 50 KURSEVA
	int _trenutnoKurseva;
	Polaganja * _polaganja;
	int _trenutnoPolaganja;

	
	void Unos(const char* naziv)
	{
		int size = strlen(naziv) + 1;
		_nazivCentra = new char[size];
		strcpy_s(_nazivCentra, size, naziv);
		_trenutnoKurseva = 0;
		_polaganja = nullptr;
		_trenutnoPolaganja = 0;
	}
	void Ispis()
	{
		cout << _nazivCentra << endl;
		for (int  i = 0; i < _trenutnoKurseva; i++)
		{
			_kursevi[i]->Ispis();
		}

		for (int  i = 0; i < _trenutnoPolaganja; i++)
		{
			_polaganja[i].Ispis();
		}
	}
	void Dealociraj()
	{
		for (int i = 0; i < _trenutnoKurseva; i++)
		{
			_kursevi[i]->Dealociraj();
			delete[]_kursevi[i]; _kursevi[i] = nullptr;
		}
		for (int i = 0; i < _trenutnoPolaganja; i++)
		{
			_polaganja[i].Dealociraj();
		}
		delete[]_polaganja;	_polaganja = nullptr;
	}
	//jedan edukacijski centar moze nuditi vise istih kurseva (npr. Matematika), ali se oni moraju realizovati u razlictim periodima (pocetak-kraj) tj. ne smiju
	//se preklapati
	//novi kurs istog tipa (npr. Matematika) se mora realizovati nakon prethodno dodanog npr. ako prethodni kurs Matematika traje 01.03.2016 - 01.04.2016, onda
	//se novi kurs Matematika moze dodati jedino ako pocinje nakon 01.04.2016
	
	bool DodajKurs(Kurs kurs)
	{
		if (_trenutnoKurseva > 50)
			return false;

		for (int i = 0; i < _trenutnoKurseva; i++)
		{
			if (_kursevi[i]->_predmet == kurs._predmet)
			{
				if (_kursevi[i]->_kraj->SumaDana() > kurs._pocetak->SumaDana())
				{
					return false;
				}
			}
		}
		_kursevi[_trenutnoKurseva] = new Kurs;
		_kursevi[_trenutnoKurseva]->Unos(kurs._predmet, kurs._razredi, *kurs._pocetak, *kurs._kraj, kurs._imePredavaca);
		_trenutnoKurseva++;
		return true;
	}
	
	//nije moguce dodati polaganje onog kursa koji nije evidentiran (registrovan, ponudjen) u tom edukacijskom centru
	//kurseve je moguce najkasnije 15 dana od dana zavrsetka (kraja) posljednje dodanog kursa
	//jedan polaznik moze vise puta polagati isti kurs, ali nova ocjena mora biti veca od prethodne ocjene na tom istom kursu
	
	bool DodajPolaganje(Polaganja p)
	{
		bool postoji = false;
		for (int i = 0; i < _trenutnoPolaganja; i++)
		{
			if (_polaganja[i]._kurs->_predmet == p._kurs->_predmet)
			{
				postoji = true;
			}
		}
		if (!postoji)
			return false;

		if (abs(_kursevi[_trenutnoKurseva - 1]->_kraj->SumaDana() - p._datumPolaganja->SumaDana()) > 15)
			return false;

		for (int i = 0; i < _trenutnoPolaganja; i++)
		{
			if (strcmp(_polaganja[i]._polaznik->_imePrezime,p._polaznik->_imePrezime)==0 && _polaganja[i]._ocjena <= p._ocjena)
				return false;
		}

		Polaganja*temp = new Polaganja[_trenutnoPolaganja + 1];
		
		for (int i = 0; i < _trenutnoPolaganja; i++)
		{
			temp[i].Unos(*_polaganja[i]._polaznik, *_polaganja[i]._kurs, *_polaganja[i]._datumPolaganja, _polaganja[i]._ocjena);
			_polaganja[i].Dealociraj();
		}
		if (_polaganja != nullptr)
			delete[]_polaganja;

		temp[_trenutnoPolaganja].Unos(*p._polaznik, *p._kurs, *p._datumPolaganja, p._ocjena);
		
		_polaganja = temp;
		_trenutnoPolaganja++;
		return true;
	}

	Polaganja * PolaganjaByDatumIRazred(Datum OD, Datum DO, enumRazredi razred, int & brojPolaganja)
	{
		Polaganja *temp = new Polaganja[brojPolaganja];

		for (int  i = 0; i < _trenutnoPolaganja; i++)
		{
			if (_polaganja[i]._datumPolaganja->SumaDana() >= OD.SumaDana() && _polaganja[i]._datumPolaganja->SumaDana() <= DO.SumaDana() &&
				_polaganja[i]._kurs->_razredi == razred)
			{
				temp[brojPolaganja].Unos(*_polaganja[i]._polaznik, *_polaganja[i]._kurs, *_polaganja[i]._datumPolaganja, _polaganja[i]._ocjena);
				brojPolaganja++;
			}
		}
		if (brojPolaganja == 0)
			return nullptr;
		else
			return temp;
	}
	//ispisuje sve informacije o edukacijskom centru. prije ispisa sortirati sve kurseve

	void Sortiraj()
	{
		for (int i = 0; i < _trenutnoKurseva-1; i++)
		{
			for (int j = 0; j < _trenutnoKurseva; j++)
			{
				if (_kursevi[i]->_predmet > _kursevi[j]->_predmet)
					swap(_kursevi[i], _kursevi[j]);
			}
		}
	}







};

//PretragaRekurzivno - rekurzivna funkcija koja pronalazi prosjecni uspjeh koji su polaznici tokom godine (npr.2016) ostvarili na odredjenom kursu (npr. Matematika)

float PretragaRekurzivno(EdukacijskiCentar ECentar, enumPredmeti predmet, int godina, int brojac = 0, int brojac_ocjena = 0, int suma_ocjena = 0)
{
	if (ECentar._trenutnoPolaganja == brojac)
	{
		if (brojac_ocjena == 0)
			return 0;
		return (float)suma_ocjena / brojac_ocjena;
	}
	if (ECentar._polaganja[brojac]._kurs->_predmet == predmet && *ECentar._polaganja[brojac]._datumPolaganja->_godina == godina)
		return PretragaRekurzivno(ECentar, predmet, godina, brojac + 1, brojac_ocjena + 1, suma_ocjena + ECentar._polaganja[brojac]._ocjena);
	return PretragaRekurzivno(ECentar, predmet, godina, brojac + 1, brojac_ocjena, suma_ocjena);
}
void main() {


	Datum datum1, datum2, datum3, datum4, datum5, datum6;
	datum1.Unos(26, 11, 2015);
	datum2.Unos(29, 5, 2016);
	datum3.Unos(5, 6, 2016);
	datum4.Unos(15, 8, 2016);
	datum5.Unos(13, 7, 2016);
	datum6.Unos(22, 9, 2016);

	Kurs matematika, hemija, biologija, engleski;
	
	matematika.Unos(Matematika, III, datum1, datum2, "Nina Bijedic");
	hemija.Unos(Hemija, III, datum2, datum3, "Murat Praso");
	biologija.Unos(Biologija, IV, datum3, datum4, "Jasmin Azemovic");
	engleski.Unos(Engleski, II, datum3, datum4, "Iris Memic");

	Datum rodjenje1, rodjenje2;
	rodjenje1.Unos(22, 8, 1982);
	rodjenje2.Unos(8, 1, 1984);

	Polaznik denis, zanin, indira;
	denis.Unos(rodjenje1, "Denis Music");
	zanin.Unos(rodjenje2, "Zanin Vejzovic");


	Polaganja denisMatematika, zaninHemija, denisBiologija;
	denisMatematika.Unos(denis, matematika, datum5, 3);//3 predstavlja ostvareni uspjeh/ocjenu, a uspjesno polozenim se smatra svaki kurs na kome je polaznik ostvario ocjenu ve√¶u od 1
	zaninHemija.Unos(zanin, hemija, datum6, 93);

	EdukacijskiCentar mostar;
	mostar.Unos("ECM - Edukacijski Center Mostar");
	//jedan edukacijski centar moze nuditi vise istih kurseva (npr. Matematika), ali se oni moraju realizovati u razlictim periodima (pocetak-kraj) tj. ne smiju se preklapati
	//novi kurs istog tipa (npr. Matematika) se mora realizovati nakon prethodno dodanog npr. ako prethodni kurs Matematika traje 01.03.2016 - 01.04.2016, onda se novi kurs Matematika moze dodati jedino ako pocinje nakon 01.04.2016
	if (mostar.DodajKurs(matematika)) {
		cout << crt << "KURS USPJESNO REGISTROVAN" << crt;
		matematika.Ispis();
		cout << crt;
	}
	//nije moguce dodati polaganje onog kursa koji nije evidentiran (registrovan, ponudjen) u tom edukacijskom centru
	//kurseve je moguce najkasnije 15 dana od dana zavrsetka (kraja) posljednje dodanog kursa
	//jedan polaznik moze vise puta polagati isti kurs, ali nova ocjena mora biti veca od prethodne ocjene na tom istom kursu
	if (mostar.DodajPolaganje(denisMatematika)) {
		cout << crt << "POLAGANJE EVIDENTIRANO" << crt;
		denisMatematika.Ispis();
	}
	Datum OD, DO;
	int brojPolaganja = 0;
	OD.Unos(1, 6, 2016);
	DO.Unos(1, 8, 2016);
	//PolaganjaByDatumIRazred - funkcija vraca niz uspjesnih polaganja koja su realizovana u periodu OD - DO, a odnose se na bilo koji predmet u definisanom razredu (npr. II)
	Polaganja * polaganjaByDatumiRazred = mostar.PolaganjaByDatumIRazred(OD, DO, II, brojPolaganja);
	cout << "U periodu od ";
	OD.Ispis();
	cout << " do ";
	DO.Ispis();
	cout << " uspjesno je polozeno " << brojPolaganja << " predmeta --->>> ";
	for (size_t i = 0; i < brojPolaganja; i++)
		polaganjaByDatumiRazred[i].Ispis();


	//PretragaRekurzivno - rekurzivna funkcija koja pronalazi prosjecni uspjeh koji su polaznici tokom godine (npr.2016) ostvarili na odredjenom kursu (npr. Matematika)
	cout << "Prosjecan uspjeh na kursu iz predmeta Matematika u 2016 godini je " << PretragaRekurzivno(mostar,Matematika,2016) << endl;
	//ispisuje sve informacije o edukacijskom centru. prije ispisa sortirati sve kurseve
	mostar.Ispis();

	//izvrsiti potrebne dealokacije
	
	datum1.Dealociraj();	datum2.Dealociraj();	datum3.Dealociraj();	datum4.Dealociraj();	datum5.Dealociraj();	datum6.Dealociraj();
	
	matematika.Dealociraj();	hemija.Dealociraj();	biologija.Dealociraj();		engleski.Dealociraj();

	rodjenje1.Dealociraj();	rodjenje2.Dealociraj();

	denis.Dealociraj();	zanin.Dealociraj();
	
	system("pause>0");
}
