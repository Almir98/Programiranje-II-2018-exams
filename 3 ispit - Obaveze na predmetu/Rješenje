#include<iostream>
#include<fstream>
using namespace std;

enum VrstaObaveze { Seminarski, Parcijalni1, Parcijalni2, Integralni, Prakticni };
const char *VrstaObavezeChar[] = { "Seminarski", "Parcijalni1", "Parcijalni2", "Integralni", "Prakticni" };		

struct Datum {
	int * _dan, *_mjesec, *_godina;
	
	void Unos(int d, int m, int g) {
		_dan = new int(d);
		_mjesec = new int(m);
		_godina = new int(g);
	}
	
	void Ispis() { cout << *_dan << "/" << *_mjesec << "/" << *_godina << endl; }
	
	void Dealociraj() { delete _dan; delete _mjesec; delete _godina; }

	int SumaDana()
	{
		return *_dan + *_mjesec * 30 + *_godina * 365;
	}
};
struct ObavezeNaPredmetu {
	VrstaObaveze * _vrstaObaveze;
	Datum * _datumIzvrsenja;
	char * _napomena;
	int _ocjena; // 5 - 10 
	
	void Unos(VrstaObaveze vrsta, Datum * datum, int ocjena, const char * napomena) {
		_vrstaObaveze = new VrstaObaveze;
		*_vrstaObaveze = vrsta;
		
		_datumIzvrsenja = new Datum;
		_datumIzvrsenja->Unos(*datum->_dan, *datum->_mjesec, *datum->_godina);
		
		_ocjena = ocjena;
		int size = strlen(napomena) + 1;
		_napomena = new char[size];
		strcpy_s(_napomena, size, napomena);
	}
	void Ispis() {
		cout <<VrstaObavezeChar[*_vrstaObaveze] << "  " << _ocjena << "   " << _napomena<<endl;
		_datumIzvrsenja->Ispis();
		cout << endl;
	}
	void Dealociraj() {
		_datumIzvrsenja->Dealociraj();
		delete _vrstaObaveze; _vrstaObaveze = nullptr;
		delete _datumIzvrsenja; _datumIzvrsenja = nullptr;
		delete[] _napomena; _napomena = nullptr;
	}
};

struct PolozeniPredmet {
	Datum _datumPolaganja; //datum koji ce se evidentirati kao datum kada je predmet polozen tj. kada je formirana konacna ocjena
	char * _nazivPredmeta;
	ObavezeNaPredmetu * _listaIzvrsenihObaveza[10];
	int _trenutnoIzvrsenihObaveza;
	int _konacnaOcjena; //formira se na osnovu ocjena izvrsenih obaveza

	/*
	1. Unos - na osnovu vrijednosti primljenog parametra izvrsiti inicijalizaciju odgovarajucih atributa*/

	void Unos(const char *naziv)
	{
		int size = strlen(naziv) + 1;
		_nazivPredmeta = new char[size];
		strcpy_s(_nazivPredmeta, size, naziv);
		_trenutnoIzvrsenihObaveza = 0;
		_konacnaOcjena = 5;
	}

	void Dealociraj()
	{
		delete[]_nazivPredmeta;		_nazivPredmeta = nullptr;

		for (int i = 0; i < _trenutnoIzvrsenihObaveza; i++)
		{
			_listaIzvrsenihObaveza[i]->Dealociraj();
		}
		if (_listaIzvrsenihObaveza != nullptr)
		{
			delete[]_listaIzvrsenihObaveza;
		}
	}

	/*2. DodajIzvrsenuObavezu – na osnovu vrijednosti primljenih parametara osigurati dodavanje novoizvrsene obaveze na predmetu. 
	Potrebno je onemoguciti dodavanje identicnih obaveza, a izmedju izvrsenja pojedinih obaveza mora proci najmanje 7 dana.
	Identicna vrsta obaveze se moze dodati samo u slucaju da se radi o Seminarskom ili je prethodno dodana obaveza (identicne vrste)
	imala ocjenu 5. Ukoliko je moguce, osigurati prosirenje niza na nacin da prihvati vise od 10 obaveza.*/

	bool DodajIzvrsenuObavezu(VrstaObaveze vrsta, Datum d, int ocjena, const char* napomena)
	{
		if (_trenutnoIzvrsenihObaveza > 10)
			return false;

		if (_trenutnoIzvrsenihObaveza > 0)
		{
			if (abs(_listaIzvrsenihObaveza[_trenutnoIzvrsenihObaveza - 1]->_datumIzvrsenja->SumaDana() - d.SumaDana()) < 7)
				return false;
		}

		for (int i = 0; i < _trenutnoIzvrsenihObaveza; i++)
		{
			if (*_listaIzvrsenihObaveza[i]->_vrstaObaveze == vrsta)
			{
				if (*_listaIzvrsenihObaveza[i]->_vrstaObaveze != Seminarski && _listaIzvrsenihObaveza[i]->_ocjena > 5)
				{
					return false;
				}
			}
		}
		_listaIzvrsenihObaveza[_trenutnoIzvrsenihObaveza] = new ObavezeNaPredmetu;
		_listaIzvrsenihObaveza[_trenutnoIzvrsenihObaveza]->Unos(vrsta, &d, ocjena, napomena);
		_trenutnoIzvrsenihObaveza++;
		return true;
	}

	/*3. FormirajKonacnuOcjenu - konacna ocjene predstavlja prosjecnu ocjenu na predmetu, a za njeno formiranje student mora posjedovati polozen integralni ili dva 
a	parijcalna ispita. Ukoliko je ispit polozen putem parcijalnih ispita, student takodjer mora imati pozitivno (ocjenom vecom od 5) ocijenjena najmanje dva seminarska
	rada. U slucaju da bilo koji od navedenih uslova nije zadovoljenkonacna ocjena treba biti postavljena na vrijednost 5. Konacna ocjena, takodjer, ne smije biti
	formirana u slucaju da u napomeni od dvije obaveze stoji rijec 'prepisivao' ili 'izbacen'. Ukoliko su ispunjeni svi uslovi, osim formiranja konacne ocjene,
	kao datum polaganja je potrebno postaviti na vrijednost datuma posljednje izvrsene obaveze koja je usla u formiranje ocjene.*/
	
	int FormirajKonacnuOcjenu()
	{
		bool imaPrvi = false;
		bool imaDrugi = false;
		bool imaIntegralni = false;
		int validnih = 0,suma=0,brojac=0;
		bool postoji = false;

		for (int i = 0; i < _trenutnoIzvrsenihObaveza; i++)
		{
			if (*_listaIzvrsenihObaveza[i]->_vrstaObaveze == Parcijalni1 && _listaIzvrsenihObaveza[i]->_ocjena > 5)
			{
				imaPrvi = true;
			}

			if (*_listaIzvrsenihObaveza[i]->_vrstaObaveze == Parcijalni2 && _listaIzvrsenihObaveza[i]->_ocjena > 5)
			{
				imaDrugi = true;
			}
		}

		if (imaPrvi && imaDrugi)
		{
			for (int i = 0; i < _trenutnoIzvrsenihObaveza; i++)
			{
				if(*_listaIzvrsenihObaveza[i]->_vrstaObaveze==Seminarski && _listaIzvrsenihObaveza[i]->_ocjena>5)
				{
					validnih++;
				}
			}
			
			for (int i = 0; i < _trenutnoIzvrsenihObaveza; i++)
			{
				if (*_listaIzvrsenihObaveza[i]->_vrstaObaveze == Seminarski && _listaIzvrsenihObaveza[i]->_ocjena > 5)
				{
					if (strstr(_listaIzvrsenihObaveza[i]->_napomena, "prepisivao") != nullptr || strstr(_listaIzvrsenihObaveza[i]->_napomena, "izbacen"))
					{
						postoji = true;
					}
				}
			}
			if (postoji)
			{
				_konacnaOcjena = 5;
				return _konacnaOcjena;
			}

			if (validnih >= 2)
			{
				for (int i = 0; i < _trenutnoIzvrsenihObaveza; i++)
				{
					if (_listaIzvrsenihObaveza[i]->_ocjena > 5)
					{
						suma += _listaIzvrsenihObaveza[i]->_ocjena;
						brojac++;
					}
				}
				suma = suma / brojac;
				_konacnaOcjena = suma;
				return _konacnaOcjena;
			}
		}

		for (size_t i = 0; i < _trenutnoIzvrsenihObaveza; i++)
		{
			if (*_listaIzvrsenihObaveza[i]->_vrstaObaveze == Integralni && _listaIzvrsenihObaveza[i]->_ocjena > 5)
			{
				imaIntegralni = true;
			}
		}

		if (imaIntegralni)
		{
			for (int i = 0; i < _trenutnoIzvrsenihObaveza; i++)
			{
				if (_listaIzvrsenihObaveza[i]->_ocjena > 5)
				{
					suma += _listaIzvrsenihObaveza[i]->_ocjena;
					brojac++;
				}
			}
			suma = suma / brojac;
			_konacnaOcjena = suma;
			return _konacnaOcjena;
		}

		_konacnaOcjena = 5;
		return _konacnaOcjena;
	}
	/*4. Ispis – ispsuje vrijednosti svih atributa strukture*/

	void Ispis()
	{
		cout << _nazivPredmeta << "  " << _konacnaOcjena << endl;

		for (int i = 0; i < _trenutnoIzvrsenihObaveza; i++)
		{
			_listaIzvrsenihObaveza[i]->Ispis();
		}
	}
};

/*
1. UpisiUBinarniFajl - objekat koji je primljen kao parametar upisuje u binarni fajl. Naziv fajla treba biti sastavljen od naziva predmeta i konacne ocjena npr.
"Programiranje II_6"*/

void UpisiUBinarniFajl(PolozeniPredmet p)
{
	char ocjena[3];
	_itoa_s(p._konacnaOcjena, ocjena, 10);

	int size = strlen(p._nazivPredmeta) + strlen(ocjena) + 2;
	char *temp = new char[size];

	strcpy_s(temp, size, p._nazivPredmeta);
	strcat_s(temp, size, "_");
	strcat_s(temp, size, ocjena);

	ofstream upis;
	upis.open(temp, ios::binary);
	upis.write((char*)(&p), sizeof(p));
	upis.close();
}

//2. UcitajIzBinarnogFajla - u objekat koji je primljen kao parametar ucitava sadrzaj binarnog fajla (naziv fajla je takodjer proslijedjen kao parametar)

void UcitajIzBinarnogFajla( PolozeniPredmet p,const char*naziv)
{
	ifstream ispis;
	ispis.open((char*)(&p), sizeof(p));
	ispis.close();
}

//3. PretragaRekurzivno - rekurzivna funkcija koja treba da vrati broj obaveza kod koji je student ostvario negativnu ocjenu


int PretragaRekurzivno(PolozeniPredmet p,int brojac=0,int neg=0)
{
	if (p._trenutnoIzvrsenihObaveza == brojac)
		return neg;

	if (p._listaIzvrsenihObaveza[brojac]->_ocjena < 6)
		return PretragaRekurzivno(p, brojac + 1,neg+1);
	return PretragaRekurzivno(p, brojac + 1, neg);
}



void main() {

	Datum datumSeminarski1, datumSeminarski2, datumParcijalni1, datumParcijalni2,
		datumIntegralni;
	datumSeminarski1.Unos(10, 6, 2016);
	datumSeminarski2.Unos(18, 6, 2016);
	datumParcijalni1.Unos(22, 3, 2016);
	datumParcijalni2.Unos(22, 6, 2016);

	//polozeni predmet
	PolozeniPredmet prII, prII_FromFile;
	
	prII.Unos("Programiranje II");
	if (prII.DodajIzvrsenuObavezu(Parcijalni1, datumParcijalni1, 6, "uslovno polozen"))
		cout << "Parcijalni 1...dodan" << endl;
	if (prII.DodajIzvrsenuObavezu(Parcijalni2, datumParcijalni2, 5, "previse gresaka"))
		cout << "Parcijalni 2...dodan" << endl;
	if (prII.DodajIzvrsenuObavezu(Seminarski, datumSeminarski1, 8, "implementirani svi algoritmi"))
		cout << "Seminarski1...dodan" << endl;
	if (prII.DodajIzvrsenuObavezu(Seminarski, datumSeminarski2, 6, "rad slican kao kod studenta IB150388"))
		cout << "Seminarski2...dodan" << endl;

	cout << "Konacna ocjena iz predmeta PRII je: " << prII.FormirajKonacnuOcjenu() << endl;

	datumParcijalni2.Unos(22, 7, 2016);
	if (prII.DodajIzvrsenuObavezu(Parcijalni2, datumParcijalni2, 6, ""))
		cout << "Parcijalni 2...dodan" << endl;
	cout << "Konacna ocjena iz predmeta PRII je: " << prII.FormirajKonacnuOcjenu() << endl;
	
	cout << "Broj negativnih ocjena je: " << PretragaRekurzivno(prII) << endl;
	
	UpisiUBinarniFajl(prII);
	prII.Ispis();
	//UcitajIzBinarnogFajla(prII, "Programiranje II_6");

	datumParcijalni1.Dealociraj();
	datumParcijalni2.Dealociraj();
	datumSeminarski1.Dealociraj();
	datumSeminarski2.Dealociraj();

	system("pause>0");
}
